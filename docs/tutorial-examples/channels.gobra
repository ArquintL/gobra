// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

package pkg

pred sendInvariant(v *int) {
    acc(v) && *v > 0
}

func main() {
  var c@ = make(chan *int)
  var pc *chan *int = &c


  var x@ int = 42
  var p *int = &x
  (*pc).Init(sendInvariant!<_!>, PredTrue!<!>)
  go inc(pc, x)
  assert *p == 42
  fold sendInvariant!<_!>(p)
  *pc <- p

  fold PredTrue!<!>()
  res, ok := <- *pc
  if (ok) {
    unfold sendInvariant!<_!>(res)
    assert *res > 0
    // we have regained write access:
    *res = 1
  }
}

requires acc(pc, 1/2)
requires acc((*pc).SendChannel(), 1/2)
requires acc((*pc).RecvChannel(), 1/2)
requires (*pc).SendGivenPerm() == sendInvariant!<_!>;
requires (*pc).SendGotPerm() == PredTrue!<!>;
requires (*pc).RecvGivenPerm() == PredTrue!<!>;
requires (*pc).RecvGotPerm() == sendInvariant!<_!>;
func inc(pc *chan *int, ghost x int) {
    fold PredTrue!<!>()
    res, ok := <- *pc
    if (ok) {
        unfold sendInvariant!<_!>(res)
        // we should have write access and thus can write to it
        // before being able to fold again, we have to revert the value:
        *res = *res + 1
        // send pointer and permission back:
        fold sendInvariant!<_!>(res)
        *pc <- res
    }
}