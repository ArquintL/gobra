domain Assume$ {
  
  
}

method test_F0(x_V0: Int, y_V0: Int) returns (z_V0: Int)
  requires x_V0 >= 0
  ensures z_V0 == x_V0 * y_V0
{
  var x_V0_CN0: Int
  var y_V0_CN1: Int
  var z_V0_CN2: Int
  var i_V1: Int
  x_V0_CN0 := 0
  y_V0_CN1 := 0
  z_V0_CN2 := 0
  x_V0_CN0 := x_V0
  y_V0_CN1 := y_V0
  z_V0_CN2 := 0
  i_V1 := 0
  i_V1 := 0
  while (i_V1 < x_V0_CN0)
    invariant z_V0_CN2 == i_V1 * y_V0_CN1
    invariant i_V1 <= x_V0_CN0 
  {
    z_V0_CN2 := z_V0_CN2 + y_V0_CN1
    i_V1 := i_V1 + 1
  }
  z_V0 := z_V0_CN2
  label returnLabel
}