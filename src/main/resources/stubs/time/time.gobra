// Signatures for the declarations in file
// https://github.com/golang/go/blob/master/src/time/time.go

// (joao) check licenses
package time

type Time struct {
	wall uint64
	ext  int64
	loc *Location
}

// After reports whether the time instant t is after u.
pure func (t Time) After(u Time) bool

// Before reports whether the time instant t is before u.
pure func (t Time) Before(u Time) bool

// Equal reports whether t and u represent the same time instant.
// Two times can be equal even if they are in different locations.
// For example, 6:00 +0200 and 4:00 UTC are Equal.
// See the documentation on the Time type for the pitfalls of using == with
// Time values; most code should use Equal instead.
func (t Time) Equal(u Time) bool

// A Month specifies a month of the year (January = 1, ...).
type Month int

const (
	January Month = 1
	February Month = 2
	March Month = 3
	April Month = 4
	May Month = 5
	June Month = 6
	July Month = 7
	August Month = 8
	September Month = 9
	October Month = 10
	November Month = 11
	December Month = 12
)

// String returns the English name of the month ("January", "February", ...).
// func (m Month) String() string // (joao) string type not supported

// A Weekday specifies a day of the week (Sunday = 0, ...).
type Weekday int

const (
	// (joao) this used to be defined in terms of iota
	Sunday Weekday = 0
	Monday Weekday = 1
	Tuesday Weekday = 2
	Wednesday Weekday = 3
	Thursday Weekday = 4
	Friday Weekday = 5
	Saturday Weekday = 6
)

// String returns the English name of the day ("Sunday", "Monday", ...).
// func (d Weekday) String() string 


// IsZero reports whether t represents the zero time instant,
// January 1, year 1, 00:00:00 UTC.
pure func (t Time) IsZero() bool

// Date returns the year, month, and day in which t occurs.
func (t Time) Date() (year int, month Month, day int)

// Year returns the year in which t occurs.
func (t Time) Year() int

// Month returns the month of the year specified by t.
func (t Time) Month() Month

// Day returns the day of the month specified by t.
func (t Time) Day() int

// Weekday returns the day of the week specified by t.
func (t Time) Weekday() Weekday

func (t Time) ISOWeek() (year, week int)

// Clock returns the hour, minute, and second within the day specified by t.
func (t Time) Clock() (hour, min, sec int)

// Hour returns the hour within the day specified by t, in the range [0, 23].
ensures 0 <= res && res <= 23
pure func (t Time) Hour() (res int)

// Minute returns the minute offset within the hour specified by t, in the range [0, 59].
ensures 0 <= res && res <= 59
pure func (t Time) Minute() (res int)

// Second returns the second offset within the minute specified by t, in the range [0, 59].
ensures 0 <= res && res <= 59
pure func (t Time) Second() (res int)

// Nanosecond returns the nanosecond offset within the second specified by t,
// in the range [0, 999999999].
ensures 0 <= res && res <= 999999999
pure func (t Time) Nanosecond() (res int)

// YearDay returns the day of the year specified by t, in the range [1,365] for non-leap years,
// and [1,366] in leap years.
ensures 1 <= res && res <= 365
func (t Time) YearDay() (res int)

// A Duration represents the elapsed time between two instants
// as an int64 nanosecond count. The representation limits the
// largest representable duration to approximately 290 years.
type Duration int64

// Common durations. There is no definition for units of Day or larger
// to avoid confusion across daylight savings time zone transitions.
//
// To count the number of units in a Duration, divide:
//	second := time.Second
//	fmt.Print(int64(second/time.Millisecond)) // prints 1000
//
// To convert an integer number of units to a Duration, multiply:
//	seconds := 10
//	fmt.Print(time.Duration(seconds)*time.Second) // prints 10s
//
const (
	Nanosecond  Duration = 1
	Microsecond          = 1000 * Nanosecond
	Millisecond          = 1000 * Microsecond
	Second               = 1000 * Millisecond
	Minute               = 60 * Second
	Hour                 = 60 * Minute
)

// String returns a string representing the duration in the form "72h3m0.5s".
// Leading zero units are omitted. As a special case, durations less than one
// second format use a smaller unit (milli-, micro-, or nanoseconds) to ensure
// that the leading digit is non-zero. The zero duration formats as 0s.

// func (d Duration) String() string

// Nanoseconds returns the duration as an integer nanosecond count.
func (d Duration) Nanoseconds() int64 { return int64(d) }

// Microseconds returns the duration as an integer microsecond count.
func (d Duration) Microseconds() int64 { return int64(d) / 1000 }

// Milliseconds returns the duration as an integer millisecond count.
func (d Duration) Milliseconds() int64 { return int64(d) / 1000000 }

// These methods return float64 because the dominant
// use case is for printing a floating point number like 1.5s, and
// a truncation to integer would make them not useful in those cases.
// Splitting the integer and fraction ourselves guarantees that
// converting the returned float64 to an integer rounds the same
// way that a pure integer conversion would have, even in cases
// where, say, float64(d.Nanoseconds())/1e9 would have rounded
// differently.

// Seconds returns the duration as a floating point number of seconds.
/* (joao) no support for float
func (d Duration) Seconds() float64 {
	sec := d / Second
	nsec := d % Second
	return float64(sec) + float64(nsec)/1e9
}

// Minutes returns the duration as a floating point number of minutes.
func (d Duration) Minutes() float64 {
	min := d / Minute
	nsec := d % Minute
	return float64(min) + float64(nsec)/(60*1e9)
}

// Hours returns the duration as a floating point number of hours.
func (d Duration) Hours() float64 {
	hour := d / Hour
	nsec := d % Hour
	return float64(hour) + float64(nsec)/(60*60*1e9)
}
*/

// Truncate returns the result of rounding d toward zero to a multiple of m.
// If m <= 0, Truncate returns d unchanged.
ensures m <= 0 ==> res == d
ensures m > 0 ==> res == d - d%m // leads to violation in the desugarer
pure func (d Duration) Truncate(m Duration) (res Duration)

// Round returns the result of rounding d to the nearest multiple of m.
// The rounding behavior for halfway values is to round away from zero.
// If the result exceeds the maximum (or minimum)
// value that can be stored in a Duration,
// Round returns the maximum (or minimum) duration.
// If m <= 0, Round returns d unchanged.
pure func (d Duration) Round(m Duration) Duration

// Add returns the time t+d.
func (t Time) Add(d Duration) Time

// Sub returns the duration t-u. If the result exceeds the maximum (or minimum)
// value that can be stored in a Duration, the maximum (or minimum) duration
// will be returned.
// To compute t-d for a duration d, use t.Add(-d).
func (t Time) Sub(u Time) Duration

// Since returns the time elapsed since t.
// It is shorthand for time.Now().Sub(t).
func Since(t Time) Duration

// Until returns the duration until t.
// It is shorthand for t.Sub(time.Now()).
func Until(t Time) Duration

// AddDate returns the time corresponding to adding the
// given number of years, months, and days to t.
// For example, AddDate(-1, 2, 3) applied to January 1, 2011
// returns March 4, 2010.
//
// AddDate normalizes its result in the same way that Date does,
// so, for example, adding one month to October 31 yields
// December 1, the normalized form for November 31.
func (t Time) AddDate(years int, months int, days int) Time /*{
	year, month, day := t.Date()
	hour, min, sec := t.Clock()
	return Date(year+years, month+Month(months), day+days, hour, min, sec, int(t.nsec()), t.Location())
}
*/

// Monotonic times are reported as offsets from startNano.
// We initialize startNano to runtimeNano() - 1 so that on systems where
// monotonic time resolution is fairly low (e.g. Windows 2008
// which appears to have a default resolution of 15ms),
// we avoid ever reporting a monotonic time of 0.
// (Callers may want to use 0 as "time not set".)
// var startNano int64 = runtimeNano() - 1 // TODO: global vars

// Now returns the current local time.
func Now() Time

// UTC returns t with the location set to UTC.
func (t Time) UTC() Time

// Local returns t with the location set to local time.
func (t Time) Local() Time /*{
	t.setLoc(Local)
	return t
}*/

// In returns a copy of t representing the same time instant, but
// with the copy's location information set to loc for display
// purposes.
//
// In panics if loc is nil.
requires loc != nil
func (t Time) In(loc *Location) Time

// Location returns the time zone information associated with t.
// ensures t.loc == nil ==> res == UTC // UTC is currently commented because it is a global var
ensures t.loc != nil ==> res == t.loc
func (t Time) Location() (res *Location)

// Zone computes the time zone in effect at time t, returning the abbreviated
// name of the zone (such as "CET") and its offset in seconds east of UTC.
// func (t Time) Zone() (name string, offset int) 

// Unix returns t as a Unix time, the number of seconds elapsed
// since January 1, 1970 UTC. The result does not depend on the
// location associated with t.
// Unix-like operating systems often record time as a 32-bit
// count of seconds, but since the method here returns a 64-bit
// value it is valid for billions of years into the past or future.
func (t Time) Unix() int64

// UnixNano returns t as a Unix time, the number of nanoseconds elapsed
// since January 1, 1970 UTC. The result is undefined if the Unix time
// in nanoseconds cannot be represented by an int64 (a date before the year
// 1678 or after 2262). Note that this means the result of calling UnixNano
// on the zero Time is undefined. The result does not depend on the
// location associated with t.
func (t Time) UnixNano() int64

// MarshalBinary implements the encoding.BinaryMarshaler interface.
//func (t Time) MarshalBinary() ([]byte, error) 

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface.
//func (t *Time) UnmarshalBinary(data []byte) error

// GobEncode implements the gob.GobEncoder interface.
// func (t Time) GobEncode() ([]byte, error)

// GobDecode implements the gob.GobDecoder interface.
// func (t *Time) GobDecode(data []byte) error

// MarshalJSON implements the json.Marshaler interface.
// The time is a quoted string in RFC 3339 format, with sub-second precision added if present.
// func (t Time) MarshalJSON() ([]byte, error)

// UnmarshalJSON implements the json.Unmarshaler interface.
// The time is expected to be a quoted string in RFC 3339 format.
// func (t *Time) UnmarshalJSON(data []byte) error

// MarshalText implements the encoding.TextMarshaler interface.
// The time is formatted in RFC 3339 format, with sub-second precision added if present.
// func (t Time) MarshalText() ([]byte, error)

// UnmarshalText implements the encoding.TextUnmarshaler interface.
// The time is expected to be in RFC 3339 format.
// func (t *Time) UnmarshalText(data []byte) error

// Unix returns the local Time corresponding to the given Unix time,
// sec seconds and nsec nanoseconds since January 1, 1970 UTC.
// It is valid to pass nsec outside the range [0, 999999999].
// Not all sec values have a corresponding time value. One such
// value is 1<<63-1 (the largest int64 value).
func Unix(sec int64, nsec int64) Time

// Date returns the Time corresponding to
//	yyyy-mm-dd hh:mm:ss + nsec nanoseconds
// in the appropriate zone for that time in the given location.
//
// The month, day, hour, min, sec, and nsec values may be outside
// their usual ranges and will be normalized during the conversion.
// For example, October 32 converts to November 1.
//
// A daylight savings time transition skips or repeats times.
// For example, in the United States, March 13, 2011 2:15am never occurred,
// while November 6, 2011 1:15am occurred twice. In such cases, the
// choice of time zone, and therefore the time, is not well-defined.
// Date returns a time that is correct in one of the two zones involved
// in the transition, but it does not guarantee which.
//
// Date panics if loc is nil.
requires acc(loc, 1/2) // can be changed to any value p > 0, but requires a ghost param of type Perm
ensures acc(loc, 1/2)
func Date(year int, month Month, day, hour, min, sec, nsec int, loc *Location) Time

// Truncate returns the result of rounding t down to a multiple of d (since the zero time).
// If d <= 0, Truncate returns t stripped of any monotonic clock reading but otherwise unchanged.
//
// Truncate operates on the time as an absolute duration since the
// zero time; it does not operate on the presentation form of the
// time. Thus, Truncate(Hour) may return a time with a non-zero
// minute, depending on the time's Location.
func (t Time) Truncate(d Duration) Time

// Round returns the result of rounding t to the nearest multiple of d (since the zero time).
// The rounding behavior for halfway values is to round up.
// If d <= 0, Round returns t stripped of any monotonic clock reading but otherwise unchanged.
//
// Round operates on the time as an absolute duration since the
// zero time; it does not operate on the presentation form of the
// time. Thus, Round(Hour) may return a time with a non-zero
// minute, depending on the time's Location.
func (t Time) Round(d Duration) Time