// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

package pkg

type node struct {
  value int
  next *node
}

pred infList(headPtr *node) {
  headPtr != nil && acc(&headPtr.value) && acc(&headPtr.next) && infList(headPtr.next)
}

requires infList(ptr)
requires n >= 0
pure func nth(ptr *node, n int) (r int) {
  return unfolding infList(ptr) in n == 0 ? ptr.value : nth(ptr.next, n-1)
}


requires infList(ptr)
ensures infList(ptr)
ensures idx >= 0
ensures nth(ptr, idx) == value
func insert(ptr *node, value int) (ghost idx int) {
  unfold infList(ptr)
  idx = insert(ptr.next, value) + 1
  fold infList(ptr)
}


requires infList(ptr)
pure func contains(ptr *node, value int) bool {
    return unfolding infList(ptr) in ptr.value == value || contains(ptr.next, value)
}


requires infList(ptr)
//:: ExpectedOutput(postcondition_error:permission_error)
ensures infList(rPtr)
ensures removeCount >= 0
ensures removeCount > 0 == old(contains(ptr, value))
ensures !contains(rPtr, value)
func removeAllOccurrances(ptr *node, value int) (rPtr *node, removeCount int) {
  unfold infList(ptr)
  newNext, removeCount := removeAllOccurrances(ptr.next, value)
  if (ptr.value == value) {
    // remove this node as well
    rPtr = newNext
    removeCount = removeCount + 1
  } else {
    // keep this node
    ptr.next = newNext
    // we forget to fold `ptr` here (as we don't do something similarly in the other case either) (seeded bug):
    // fold infList(ptr)
    rPtr = ptr
  }
}
