domain Tuple2[T0, T1] {
  
  function tuple2(t0: T0, t1: T1): Tuple2[T0, T1]
  
  function get0of2(p: Tuple2[T0, T1]): T0
  
  function get1of2(p: Tuple2[T0, T1]): T1
  
  axiom getter_over_tuple2 {
    (forall t0: T0, t1: T1 :: { (tuple2(t0, t1): Tuple2[T0, T1]) } (get0of2((tuple2(t0, t1): Tuple2[T0, T1])): T0) == t0 && (get1of2((tuple2(t0, t1): Tuple2[T0, T1])): T1) == t1)
  }
  
  axiom tuple2_over_getter {
    (forall p: Tuple2[T0, T1] :: { (get0of2(p): T0) } { (get1of2(p): T1) } (tuple2((get0of2(p): T0), (get1of2(p): T1)): Tuple2[T0, T1]) == p)
  }
}

field Height_main_AX$array-test$gobra@3$16R: Ref

field val$_Int: Int

field Width_main_AX$array-test$gobra@3$16R: Ref

function GetWidth_main_PMRectangle(r_main_V0: Ref): Int
  requires true
  requires acc(r_main_V0.Width_main_AX$array-test$gobra@3$16R, write) && acc(r_main_V0.Width_main_AX$array-test$gobra@3$16R.val$_Int, write)
{
  r_main_V0.Width_main_AX$array-test$gobra@3$16R.val$_Int
}

method main_main_F()
{
  
  // decl 
  
  
  // decl r_main_V1, w_main_V1
  
  var w_main_V1: Int
  var r_main_V1: Ref
  inhale acc(r_main_V1.Width_main_AX$array-test$gobra@3$16R, write)
  inhale acc(r_main_V1.Width_main_AX$array-test$gobra@3$16R.val$_Int, write)
  inhale acc(r_main_V1.Height_main_AX$array-test$gobra@3$16R, write)
  inhale acc(r_main_V1.Height_main_AX$array-test$gobra@3$16R.val$_Int, write)
  r_main_V1.Width_main_AX$array-test$gobra@3$16R.val$_Int := 0
  r_main_V1.Height_main_AX$array-test$gobra@3$16R.val$_Int := 0
  w_main_V1 := 0
  
  // r_main_V1 = Rectangle_main_T{2, 5}
  
  var fn$$0_Width_main_AX$array-test$gobra@3$16V: Int
  var fn$$0_Height_main_AX$array-test$gobra@3$16V: Int
  fn$$0_Width_main_AX$array-test$gobra@3$16V := 2
  fn$$0_Height_main_AX$array-test$gobra@3$16V := 5
  r_main_V1.Width_main_AX$array-test$gobra@3$16R.val$_Int := fn$$0_Width_main_AX$array-test$gobra@3$16V
  var fn$$1_Width_main_AX$array-test$gobra@3$16V: Int
  var fn$$1_Height_main_AX$array-test$gobra@3$16V: Int
  fn$$1_Width_main_AX$array-test$gobra@3$16V := 2
  fn$$1_Height_main_AX$array-test$gobra@3$16V := 5
  r_main_V1.Height_main_AX$array-test$gobra@3$16R.val$_Int := fn$$1_Height_main_AX$array-test$gobra@3$16V
  
  // w_main_V1 = &r_main_V1GetWidth()
  
  assert r_main_V1 != null
  w_main_V1 := GetWidth_main_PMRectangle(r_main_V1)
  assert r_main_V1 != null
  
  // assert &r_main_V1GetWidth() == w_main_V1 && w_main_V1 == 2
  
  assert true && GetWidth_main_PMRectangle(r_main_V1) == w_main_V1 && (true && w_main_V1 == 2)
  label returnLabel
}