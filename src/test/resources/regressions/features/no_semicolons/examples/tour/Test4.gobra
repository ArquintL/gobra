// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
// Copyright (c) 2011-2020 ETH Zurich.

package trivial

type Point struct {
  x int
  y int
}

requires acc(p.x)
ensures  acc(p.x)
pure func (p *Point) getX1() int {
  return p.x
}

requires acc(p.x)
ensures  acc(p.x) && res == old(p.x) && p.x == old(p.x)
func (p *Point) getX2() (res int) {
  res = p.x
}

func client() {
  p! := Point{5, 7}
  x := (&p).getX2()
  assert x == 5
  y := p.getX2()
  assert y == 5
  assert ((&p).getX1()) == 5
}


/* not supported yet
type Number int;

func (this Number) inc() (res int) {
  res = this + 1;
};*/



//--------------------------------------------------
/* interfaces are not supported yet

type Pair interface {
  getX() int
  setX(int)
};

requires acc(p.x);
ensures  acc(p.x) && res == old(p.x) && p.x == old(p.x);
func (p *Point) getX() (res int) {
  res = p.x;
};

requires acc(p.x);
ensures  acc(p.x) && p.x == v;
func (p *Point) getX(v int) {
  p.x = v;
};

func client(p *Pair) {

}
*/

requires this != nil ==> (acc(this.x) && acc(this.y))
ensures acc(res.x) && acc(res.y)
func (this *Point) idOrNew() (res *Point) {
  if this == nil {
    res = &Point{0,0}
  } else {
    res = this
  }
}

func idClient() {
  var p *Point
  assert p == nil
  q := p.idOrNew()
  q.x = 5
}

